// Code generated by go-bindata.
// sources:
// templates/join-session.tmpl
// templates/session.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJoinSessionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x41\x8f\xda\x3e\x10\xc5\xef\x7c\x8a\x27\x5f\x48\xb4\xfc\x9d\x3b\x24\x48\x7f\x6d\x7b\xe8\x99\x95\x7a\xac\x82\x33\x10\x17\xe3\x41\xf6\x04\x84\x10\xdf\xbd\x72\x0c\x68\x77\xbb\xf4\x84\xad\x79\xef\x37\x6f\x86\xb8\xee\x65\xef\x96\x93\xba\xa7\xb6\x5b\x4e\x80\x5a\xac\x38\x5a\xae\x8e\x7c\x6e\x77\x75\x95\x6f\x93\xba\xca\xf5\x7a\xcd\xdd\x39\xc9\xde\x7a\x1b\x61\x23\xce\x3c\x04\xac\x07\x11\xf6\x1a\x6f\x3d\x05\x42\x1b\x08\xfb\xd6\x9f\xe1\xec\x8e\x60\x65\x96\xea\x90\x64\x60\x4f\x77\x53\x4c\xbd\xa2\x09\xf6\x20\x89\x07\x1c\xdb\x00\xc7\x06\x0d\x4e\xd6\x77\x7c\xd2\x8e\x4d\x2b\x96\xfd\x0c\x9e\x4e\xbf\x86\x60\x17\xa3\xce\x6e\x50\x38\x36\xfa\x10\x58\xd8\xb0\x43\xd3\x34\x50\xbd\xc8\x21\xce\x55\x89\xcb\x28\x02\x4e\x31\x59\xd0\x40\x9d\x62\x9c\xab\xec\xbd\x82\x5c\xa4\x2f\x35\x0f\xc9\xe4\x5d\xe5\xa5\x81\xaa\x2a\x85\x97\x94\x4c\xf7\x1c\x65\xf1\x57\xf9\x37\x5b\xff\x5f\xa4\x18\x2d\xfb\xea\x72\xd1\x3f\xbe\x5d\xaf\x37\x96\x23\x41\x64\xb3\x23\x41\x93\x86\xc0\x4f\x5a\xaf\xc6\x7b\x91\x09\x65\xd6\x19\xf6\x91\x1d\x69\xc7\xdb\x42\xfd\x2f\x42\xfb\x83\x58\xbf\xc5\x2b\x7b\x4f\x26\xed\x40\x6b\xad\xca\xc5\x64\x54\x67\xa2\x66\xcf\x07\xf2\x68\x50\x94\x68\x96\x8f\x99\x3e\xb0\x56\x83\x31\x14\xe3\x66\x70\xee\x7c\xa7\x51\xa7\x6e\x6d\x1f\xa8\x48\xbe\x2b\xd4\x65\xda\x8e\xbd\xa6\x73\x4c\xd3\x50\xd3\xab\x2a\xf3\x4a\x3e\x37\xde\x53\x8c\xed\x96\xd0\x60\x33\xf8\xd1\x83\x82\xca\x27\x11\xf2\xfc\x5b\x16\x74\xad\xb4\x73\xa8\x19\x48\xa7\xe3\x23\x45\x55\x7d\xfa\xc7\x75\x1f\x68\x83\xe6\xa6\x5b\x7c\x1d\xc2\x38\x8e\x29\x02\x1d\xc9\xcb\xf3\x0d\xe4\xf6\xaf\x49\xdc\xbd\x5b\x68\xce\x91\xac\xe5\x13\x3e\x85\xc0\x21\xf1\xf3\xef\xbf\xf9\xdf\x93\x28\x33\xd3\xe9\x03\xb3\xae\xee\x9f\x79\x5d\xe5\xe7\x53\x57\xf9\xd1\xfd\x09\x00\x00\xff\xff\x4b\xb5\x39\x17\x7c\x03\x00\x00")

func templatesJoinSessionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesJoinSessionTmpl,
		"templates/join-session.tmpl",
	)
}

func templatesJoinSessionTmpl() (*asset, error) {
	bytes, err := templatesJoinSessionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/join-session.tmpl", size: 892, mode: os.FileMode(420), modTime: time.Unix(1563120948, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSessionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x41\x6f\xdb\x3c\x0c\x86\xef\xfe\x15\x84\x2e\xb1\xd1\x7e\xd2\x3d\x91\x0c\x7c\xe8\x76\xd8\x6e\x5b\x31\xec\x38\x28\x32\x63\x7b\x55\xc4\x40\x54\x12\x04\x86\xff\xfb\x20\xab\x0d\xda\xae\xd9\x49\x12\xf8\xf2\xe1\x4b\x4a\xd2\x43\xda\xfb\xb6\xd2\x03\xda\xae\xad\x00\x74\x1a\x93\xc7\xf6\xf1\x44\x17\xfb\xa4\x55\x39\x55\x5a\x95\xb8\xde\x52\x77\x59\x64\x16\x86\x88\x3b\x23\xa6\x49\xfe\x88\x7e\x9e\xd5\x6f\x1a\x83\x9a\x26\xf9\xe5\xd3\x3c\x8b\xf6\x2b\x8d\x01\x7a\xbb\x47\xad\x6c\xab\xb7\x51\xe5\xa4\x6f\xdf\xc1\x51\x87\xd0\x13\x32\x0c\x18\xb1\xca\x24\x76\x71\x3c\xa4\x1c\x07\x38\xd9\x08\x9e\x1c\x18\x38\x8f\xa1\xa3\xb3\xf4\xe4\x6c\x1a\x29\xdc\x43\xc0\xf3\xaf\x63\x1c\x37\x8b\x6e\xdc\x41\xed\xc9\xc9\x43\xa4\x44\x8e\x3c\x18\x63\x40\x0c\x29\x1d\x78\x2d\x1a\x98\x16\x11\xc0\x99\x73\x0a\x18\x10\x67\xe6\xb5\x28\xb9\x33\xa0\x67\xfc\x50\x73\x95\x54\xaf\x22\x77\x06\x84\x52\x02\xee\xb2\x33\x39\x10\xa7\xcd\x5f\x61\x46\xe6\x91\xc2\x7f\x9c\x6c\x3a\xf2\x75\x0c\x45\xe8\x31\x01\x93\x7b\xc2\x04\x26\xb7\x01\x3f\x71\xfb\xb8\x9c\xeb\xc2\x68\x8a\xce\x51\x60\xf2\x28\x3d\xf5\xb5\xf8\x3f\x25\xdc\x1f\xd2\x18\x7a\x78\xa0\x10\xd0\xe5\x29\x48\x29\x45\xb3\xa9\x16\x75\x21\x4a\x0a\x74\xc0\x00\x06\xea\x06\x4c\x7b\xed\xea\x0d\xeb\xf1\xe8\x1c\x32\xef\x8e\xde\x5f\x5e\x68\xd8\x89\xe7\xb2\x57\x14\x63\xe8\x6a\x31\xad\xec\x52\x6b\xb5\x86\x55\xbe\xd3\xd5\x2c\x9a\x32\x94\xf7\x85\xf7\xc8\x6c\x7b\x04\x03\xbb\x63\x58\x72\xa0\xc6\xe6\x86\x85\xd2\x7f\x4f\x09\x3a\x9b\xec\x1a\xc4\x3d\xa0\xcc\xdb\xab\x0b\xa5\xde\xdd\xb9\xcc\x2f\x0c\xcc\xb3\x6e\xf3\xb1\x09\xe7\x89\xb3\x05\x3c\x61\x48\xb7\x27\x50\xca\x3f\x64\x71\xf7\x6a\xa0\xc5\x47\x4e\x6d\x6e\xf0\x31\x46\x8a\x99\x5f\xd6\x7f\xf3\x3f\x67\x51\x61\xe6\xdd\x1b\xa6\x56\x2f\x0f\x5d\xab\xf2\x8b\xb4\x2a\x7f\xef\x4f\x00\x00\x00\xff\xff\x9d\x30\xc9\x7a\x83\x03\x00\x00")

func templatesSessionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSessionTmpl,
		"templates/session.tmpl",
	)
}

func templatesSessionTmpl() (*asset, error) {
	bytes, err := templatesSessionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/session.tmpl", size: 899, mode: os.FileMode(420), modTime: time.Unix(1563120961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/join-session.tmpl": templatesJoinSessionTmpl,
	"templates/session.tmpl": templatesSessionTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"join-session.tmpl": &bintree{templatesJoinSessionTmpl, map[string]*bintree{}},
		"session.tmpl": &bintree{templatesSessionTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

