// Code generated by go-bindata.
// sources:
// templates/join-session.tmpl
// templates/session.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJoinSessionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x41\x8f\xda\x3e\x10\xc5\xef\x7c\x8a\x27\x5f\x48\xb4\xfb\x77\xee\x90\x20\xfd\xb5\xed\xa1\xe7\x5d\xa9\xc7\x2a\x38\x03\x71\x31\x1e\xe4\x71\x88\x10\xe2\xbb\x57\x8e\x01\xed\x6e\x97\x9e\xb0\x35\xef\xfd\xe6\xcd\x10\xd7\x7d\xdc\xbb\xd5\xac\xee\xa9\xed\x56\x33\xa0\x8e\x36\x3a\x5a\xbd\x1e\xf9\xd4\xee\xea\x2a\xdf\x66\x75\x95\xeb\xf5\x9a\xbb\x53\x92\xbd\xf5\x56\x60\x05\x27\x1e\x02\xd6\x43\x8c\xec\x35\xde\x7a\x0a\x84\x36\x10\xf6\xad\x3f\xc1\xd9\x1d\xc1\xc6\xe7\x54\x47\x4c\x06\xf6\x74\x33\x49\xea\x25\x26\xd8\x43\x4c\x3c\xe0\xd8\x06\x38\x36\x68\x30\x5a\xdf\xf1\xa8\x1d\x9b\x36\x5a\xf6\xcf\xf0\x34\xfe\x1a\x82\x5d\x4e\x3a\xbb\x41\xe1\xd8\xe8\x43\xe0\xc8\x86\x1d\x9a\xa6\x81\xea\x63\x3c\xc8\x42\x95\x38\x4f\x22\x60\x94\x64\x41\x03\x35\x8a\x2c\x54\xf6\x5e\x40\x4e\xe8\x4b\xcd\x5d\x32\x7b\x57\x79\x6a\xa0\xaa\x4a\xe1\x29\x25\xd3\x3d\x4b\x5c\xfe\x55\x1e\xa5\xfa\xcd\xd6\xff\x27\x24\x62\xd9\x57\xe7\xb3\xfe\xf1\xed\x72\xb9\xe2\x1c\x45\x08\x9b\x1d\x45\x34\x69\x0e\xfc\xa4\xf5\xeb\x74\x2f\x32\xa4\xcc\x3a\xc3\x5e\xd8\x91\x76\xbc\x2d\xd4\xff\x31\xd2\xfe\x10\xad\xdf\xe2\x85\xbd\x27\x93\xd6\xa0\xb5\x56\xe5\x72\x36\xa9\x33\x51\xb3\xe7\x03\x79\x34\x28\x4a\x34\xab\xfb\x58\x1f\x58\xaf\x83\x31\x24\xb2\x19\x9c\x3b\xdd\x68\xd4\xa9\x6b\xdb\x3b\x4a\xc8\x77\x85\x3a\xcf\xdb\xa9\xd7\x7c\x81\x79\x1a\x6a\x7e\x51\x65\xde\xca\xe7\xc6\x7b\x12\x69\xb7\x84\x06\x9b\xc1\x4f\x1e\x14\x54\x3e\x88\x90\xe7\xdf\x72\x44\xd7\xc6\x76\x01\xf5\x0c\xd2\xe9\x78\x4f\x51\x55\x9f\xfe\x74\xdd\x07\xda\xa0\xb9\xea\x96\x5f\x87\x30\x8e\x25\x45\xa0\x23\xf9\xf8\x78\x03\xb9\xfd\x4b\x12\x77\xef\x16\x9a\x73\x24\x6b\xf9\x80\x4f\x21\x70\x48\xfc\xfc\xfb\x6f\xfe\xf7\x24\xca\xcc\x74\xfa\xc0\xac\xab\xdb\x97\x5e\x57\xf9\x05\xd5\x55\x7e\x77\x7f\x02\x00\x00\xff\xff\x3a\x52\x1e\xff\x7f\x03\x00\x00")

func templatesJoinSessionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesJoinSessionTmpl,
		"templates/join-session.tmpl",
	)
}

func templatesJoinSessionTmpl() (*asset, error) {
	bytes, err := templatesJoinSessionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/join-session.tmpl", size: 895, mode: os.FileMode(420), modTime: time.Unix(1563122099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSessionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\xc1\x6e\xdb\x30\x0c\x86\xef\x7e\x0a\x42\x97\xd8\x68\x27\xdd\x13\xcb\xc0\xd0\xed\xb0\xdd\xb6\x60\xd8\x71\x50\x64\xc6\xf6\xaa\x88\x81\xa8\xc4\x08\x0c\xbf\xfb\x20\xab\x0d\xda\xae\xe9\x49\x12\xf8\xf3\xe3\x4f\x4a\xaa\xfb\x78\x70\x4d\x51\xf7\x68\xda\xa6\x00\xa8\xe3\x10\x1d\x36\xdb\x33\x5d\xcc\x63\xad\xf2\xa9\xa8\x55\x8e\xd7\x3b\x6a\x2f\x8b\xcc\x40\x1f\x70\xaf\xc5\x34\xc9\x5f\xc1\xcd\xb3\xfa\x4b\x83\x57\xd3\x24\xbf\x7d\x99\x67\xd1\x7c\xa7\xc1\x43\x67\x0e\x58\x2b\xd3\xd4\xbb\xa0\x52\xd2\x8f\x9f\x60\xa9\x45\xe8\x08\x19\x7a\x0c\x58\x24\x12\xdb\x30\x1c\x63\x8a\x03\x9c\x4d\x00\x47\x16\x34\x8c\x83\x6f\x69\x94\x8e\xac\x89\x03\xf9\x7b\xf0\x38\xfe\x39\x85\x61\xb3\xe8\x86\x3d\x94\x8e\xac\x3c\x06\x8a\x64\xc9\x81\xd6\x1a\x44\x1f\xe3\x91\xd7\xa2\x82\x69\x11\x01\x8c\x9c\x52\x40\x83\x18\x99\xd7\x22\xe7\xce\x80\x8e\xf1\x5d\xcd\x55\x52\xbc\x88\xdc\x69\x10\x4a\x09\xb8\x4b\xce\x64\x4f\x1c\x37\xff\x85\x47\x56\x8c\xcc\x03\xf9\x4f\x1c\x4d\x3c\xf1\x75\x12\x59\xeb\x30\x02\x93\x7d\xc4\x08\x3a\x75\x02\xbf\x71\xb7\x5d\xce\x65\xc6\x54\x59\x67\xc9\x33\x39\x94\x8e\xba\x52\x7c\x8e\x11\x0f\xc7\x38\xf8\x0e\x1e\xc8\x7b\xb4\x69\x10\x52\x4a\x51\x6d\x8a\x45\x9d\x89\x92\x3c\x1d\xd1\x83\x86\xb2\x02\xdd\x5c\x1b\x7b\xc5\xda\x9e\xac\x45\xe6\xfd\xc9\xb9\xcb\x33\x0d\x5b\xf1\x54\xf6\x8a\x62\xf4\x6d\x29\xa6\x95\x59\x6a\xad\xd6\xb0\x4a\xd7\xba\x9a\x45\x95\xe7\xf2\xb6\xf0\x01\x99\x4d\x87\xa0\x61\x7f\xf2\x4b\x0e\x94\x58\xdd\xb0\x90\xfb\xef\x28\x42\x6b\xa2\x59\x83\xb8\x07\x94\x69\x7b\x75\xa1\xd4\x9b\x6b\x97\xe9\x91\x81\x7e\xd2\x6d\xde\x37\x61\x1d\x71\xb2\x80\x67\xf4\xf1\xf6\x04\x72\xf9\x87\x24\x6e\x5f\x0c\x34\xfb\x48\xa9\xd5\x0d\x3e\x86\x40\x21\xf1\xf3\xfa\x31\xff\x6b\x12\x65\x66\xda\xbd\x62\xd6\xea\xf9\xad\xd7\x2a\x7f\xa4\x5a\xe5\xef\xf7\x2f\x00\x00\xff\xff\xa3\x8d\x03\x82\x86\x03\x00\x00")

func templatesSessionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSessionTmpl,
		"templates/session.tmpl",
	)
}

func templatesSessionTmpl() (*asset, error) {
	bytes, err := templatesSessionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/session.tmpl", size: 902, mode: os.FileMode(420), modTime: time.Unix(1563122105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/join-session.tmpl": templatesJoinSessionTmpl,
	"templates/session.tmpl": templatesSessionTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"join-session.tmpl": &bintree{templatesJoinSessionTmpl, map[string]*bintree{}},
		"session.tmpl": &bintree{templatesSessionTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

