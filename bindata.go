// Code generated by go-bindata.
// sources:
// templates/join-session.tmpl
// templates/session.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJoinSessionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x31\x8f\xdb\x30\x0c\x85\xf7\xfc\x0a\xc2\x4b\x62\xe0\x2a\xed\x39\x39\x40\x71\xed\xd0\x39\x57\x74\x56\x6c\x26\x56\xa3\x90\x81\x48\x9f\x61\x04\xfe\xef\x85\xac\xe6\xd0\x1e\x9a\x4e\x16\xc1\xc7\xef\x3d\x13\x74\xbd\x5e\xe2\x6e\xe5\x7a\xf4\xdd\x6e\x05\xe0\x34\x68\xc4\xdd\xfe\x8d\x27\x7f\x76\xb6\x54\x2b\x67\x4b\xdf\x1d\xb8\x9b\xb2\xec\xb5\x0f\x02\x41\x60\xe2\x21\xc1\x61\x50\x65\x32\xf0\xda\x63\x42\xf0\x09\xe1\xe2\x69\x82\x18\xce\x08\x41\x9f\x72\x1f\x34\x0f\x30\xe1\x7d\x48\xb2\x97\xb4\x29\x5c\x35\xf3\x00\x22\x2a\x08\xb7\x67\x54\x68\x80\x70\x84\x1f\x78\xd8\x2f\xf5\xa6\x1a\x65\x6b\xed\xed\x66\xbe\xa7\x38\xcf\x76\x14\xfb\x93\x03\x7d\x12\x14\x09\x4c\xb9\xf1\xed\xcb\x3c\x57\xf5\xf3\x02\x6a\x99\x84\x23\x9a\xc8\xa7\x4d\xf5\x59\x15\x2f\x57\x0d\x74\x82\x17\x26\xc2\x56\x03\x93\x31\x26\x8b\x17\x75\xb1\x34\x4c\x7c\x45\x82\x06\x36\x35\x34\x3b\xb8\x2d\xbd\x0f\xac\xfd\xd0\xb6\x28\x72\x1c\x62\x9c\xee\x34\xec\xee\xb6\xef\x28\x41\xea\x36\xd5\x6d\xed\x17\xaf\xf5\x16\xd6\x39\xed\x7a\xae\xea\x45\x37\x7f\x34\xbe\xa0\x88\x3f\x21\x34\x70\x1c\x68\x99\x81\x0d\xd6\x0f\x22\x94\x05\x9d\x58\xa1\xf3\xea\xb7\x50\x3d\x01\x9a\xfc\x7c\x4f\x61\xed\x18\xa8\xe3\xd1\x44\x6e\xfd\xf2\xb7\x7d\xc2\x23\x34\xbf\x75\xcf\xff\x0e\xd1\x46\x96\x1c\x01\xdf\x90\xf4\xf1\x06\x8a\xfd\x4b\x16\x77\x7f\x2c\xb4\xe4\xc8\xa3\xf5\x03\x3e\xa6\xc4\x29\xf3\xcb\xf7\xff\xfc\xaf\x59\x54\x98\xf9\xf5\x17\xd3\xd9\xfb\xd1\x38\x5b\x8e\xd1\xd9\x72\xc2\xbf\x02\x00\x00\xff\xff\xfe\x44\xb3\x4e\xca\x02\x00\x00")

func templatesJoinSessionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesJoinSessionTmpl,
		"templates/join-session.tmpl",
	)
}

func templatesJoinSessionTmpl() (*asset, error) {
	bytes, err := templatesJoinSessionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/join-session.tmpl", size: 714, mode: os.FileMode(420), modTime: time.Unix(1563118623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSessionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x8f\xd3\x30\x10\x85\xef\xfd\x15\xa3\x5c\x9a\x48\x60\xdf\xbb\x4e\x24\xb4\x70\x80\x1b\x54\x88\xb3\x6b\x4f\x53\xb3\xae\xa7\xf2\xb8\x1b\x55\x51\xfe\x3b\xb2\x4d\x23\x58\x51\x4e\xb1\x35\x6f\xbe\xf7\x32\x1e\x75\x4a\x67\x3f\x6c\xd4\x09\xb5\x1d\x36\x00\x2a\xb9\xe4\x71\xd8\xbf\xd2\x4d\xbf\x28\x59\x6f\x1b\x25\x6b\x5d\x1d\xc8\xde\x8a\x4c\xc3\x29\xe2\xb1\x6f\xe6\x59\x7c\x8f\x7e\x59\xe4\x4f\x72\x41\xce\xb3\xf8\xfc\x71\x59\x9a\xe1\x0b\xb9\x00\xa3\x3e\xa3\x92\x7a\x50\x87\x28\x73\xd3\xd7\x6f\x60\xc8\x22\x8c\x84\x0c\x27\x8c\xb8\xc9\x24\x36\xd1\x5d\x52\xae\x03\x78\x4c\xc0\x64\x5e\x30\x41\x0f\x01\x27\xf8\x81\x87\x7d\xb9\xb7\xcd\xc4\x3b\x29\x57\xbb\x89\x25\x23\xb3\xa3\xf0\x9e\x93\x4e\x57\x5e\xbd\xbb\xa7\x82\x32\x14\x98\x3c\x0a\x4f\x63\xdb\x7c\x48\x09\xcf\x97\xe4\xc2\x08\xcf\x14\x02\x9a\xe4\x28\x08\x21\xb2\xb8\xa8\xab\xa9\xa0\x40\x17\x0c\xd0\x43\xdb\x41\x3f\xc0\x5c\x6a\x6f\x58\xfb\xab\x31\xc8\x7c\xbc\x7a\x7f\xbb\xd3\xd0\xde\x6d\x57\x14\x63\xb0\x6d\x33\x6f\x75\xf1\xda\xee\x60\x9b\x27\xb4\x5d\x9a\xae\xe8\x96\xb7\xc6\x67\x64\xd6\x23\x42\x0f\xc7\x6b\x28\x3d\xd0\x62\xf7\x20\x42\x1d\xd1\x48\x09\xac\x4e\x7a\x07\xcd\x3b\x40\x91\x8f\x6b\x0a\x29\x27\x17\x2c\x4d\xc2\x93\xd1\xe5\x6f\xf3\x7b\x41\xff\x5b\xf7\xf4\xef\x10\xc6\x13\xe7\x08\xf8\x8a\x21\x3d\x9e\x40\xb5\x7f\xce\x62\xfb\xc7\x40\x6b\x8e\xdc\xda\x3d\xe0\x63\x8c\x14\x33\xbf\x7e\xff\xcf\xff\x94\x45\x95\x99\x4f\x7f\x31\x95\xbc\xaf\x8d\x92\x75\x27\x95\xac\x9b\xfc\x2b\x00\x00\xff\xff\xb5\xde\x0c\xa5\xd1\x02\x00\x00")

func templatesSessionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSessionTmpl,
		"templates/session.tmpl",
	)
}

func templatesSessionTmpl() (*asset, error) {
	bytes, err := templatesSessionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/session.tmpl", size: 721, mode: os.FileMode(420), modTime: time.Unix(1563118303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/join-session.tmpl": templatesJoinSessionTmpl,
	"templates/session.tmpl": templatesSessionTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"join-session.tmpl": &bintree{templatesJoinSessionTmpl, map[string]*bintree{}},
		"session.tmpl": &bintree{templatesSessionTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

