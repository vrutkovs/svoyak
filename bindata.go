// Code generated by go-bindata.
// sources:
// templates/session.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSessionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x8f\xd3\x30\x10\x85\xef\xf9\x15\xa3\x5c\x92\x48\xc8\xbe\x77\x9d\x48\x68\xe1\x00\x37\xa8\x10\x67\xd7\x9e\x26\x66\x1d\x4f\x65\xbb\x8d\xaa\x28\xff\x1d\xd9\xa6\x05\x2a\xca\x29\xb6\xe6\xcd\xf7\x5e\xc6\x23\xa6\x38\xdb\xa1\x12\x13\x4a\x3d\x54\x00\x22\x9a\x68\x71\xd8\x5f\xe8\x2a\xdf\x04\x2f\xb7\x4a\xf0\x52\x17\x07\xd2\xd7\x2c\x93\x30\x79\x3c\xf6\xf5\xba\xb2\x6f\xde\x6e\x1b\xff\x41\xc6\xf1\x75\x65\x9f\x3e\x6c\x5b\x3d\x7c\x26\xe3\x60\x94\x33\x0a\x2e\x07\x71\xf0\x3c\x35\x7d\xf9\x0a\x8a\x34\xc2\x48\x18\x60\x42\x8f\x55\x22\x05\xe5\xcd\x29\xa6\x3a\x80\xc5\x08\x81\xd4\x1b\x46\xe8\xc1\xe1\x02\xdf\xf1\xb0\xcf\xf7\xb6\x5e\xc2\x8e\xf3\x64\xc6\x97\xc0\x03\x86\x60\xe8\xb7\x61\xf7\x92\xfb\x15\xb9\x40\x16\x99\xa5\xb1\xad\xdf\xc7\x88\xf3\x29\x1a\x37\xc2\x2b\x39\x87\x2a\x1a\x72\x8c\xb1\x24\xce\xea\xe2\xc4\xc8\xd1\x09\x1d\xf4\xd0\x76\xd0\x0f\xb0\xe6\xda\x03\x6b\x7f\x56\x0a\x43\x38\x9e\xad\xbd\xde\x68\xa8\x6f\xb6\x77\x54\x40\xa7\xdb\x7a\x6d\x64\xf6\x6a\x76\xd0\xa4\xb1\x34\x5b\xdd\x65\xdd\xf6\x68\x3c\x63\x08\x72\x44\xe8\xe1\x78\x76\xb9\x07\x5a\xec\x9e\x44\x28\x73\x19\x29\x82\x96\x51\xee\xa0\x7e\x07\xc8\xd2\xf1\x9e\x82\xf3\xc5\x38\x4d\x0b\xb3\xa4\x64\xfe\xdb\xf4\x48\xd0\xff\xd2\xbd\xfc\x3b\x84\xb2\x14\x52\x04\xbc\xa0\x8b\xcf\x27\x50\xec\x5f\x93\x58\xff\x31\xd0\x92\x23\xb5\x76\x4f\xf8\xe8\x3d\xf9\xc4\x2f\xdf\xff\xf3\x3f\x26\x51\x61\xa6\xd3\x5f\x4c\xc1\x6f\xbb\x22\x78\x59\x44\xc1\xcb\xfa\xfe\x0c\x00\x00\xff\xff\xc5\xca\xc3\xb1\xc6\x02\x00\x00")

func templatesSessionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSessionTmpl,
		"templates/session.tmpl",
	)
}

func templatesSessionTmpl() (*asset, error) {
	bytes, err := templatesSessionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/session.tmpl", size: 710, mode: os.FileMode(420), modTime: time.Unix(1563117040, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/session.tmpl": templatesSessionTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"session.tmpl": &bintree{templatesSessionTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

